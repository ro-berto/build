// Copyright 2020 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

syntax = "proto3";
package recipe_modules.build.archive;

// Next id: 3
message LatestFile {
  // The file for the latest file. Format is the same as |ArchiveData.gcs_path|.
  string gcs_path = 1;
  // The content of the latest file. It supports the same string
  // substitutions as |ArchiveData.gcs_path|.
  string gcs_file_content = 2;
}

// Next id: 3
message ArchiveFileRename {
  string from_file = 1;
  string to_file = 2;
}

// Next id: 12
message ArchiveData {
  // A list of relative paths to files that should be archived. All files are
  // relative to the build directory, which is passed alongside this proto to
  // the archiving code.
  repeated string files = 1;
  // Rename files. Internally renaming happens after copying all files to a
  // temporary folder and before archiving. e.g. If the compiled target
  // has a file named "foo.zoo", and you want it to be "foo" in the zip file,
  // then you can have:
  //   files = ["foo.zoo"]
  //   rename_files = [{ "from_file":"foo.zoo", "to_file":"foo" }]
  repeated ArchiveFileRename rename_files = 10;
  // A list of globs that will be expanded to files that should be archived. All
  // globs are expanded relative to the build directory, which is passed
  // alongside this proto to the archiving code.
  repeated string file_globs = 6;
  // A list of relative paths to directories that should be archived. All
  // directories are relative to the build directory, which is passed alongside
  // this proto to the archiving code.
  // Note: The |files| and |dirs| fields don't interact. Both are relative to
  // the build directory.
  repeated string dirs = 2;
  // The name of the google cloud storage bucket to upload to.
  string gcs_bucket = 3;
  // The destination path in the bucket to upload to. The following string
  // substitutions are built-in:
  // {%position%} -> commit position extracted from got_revision_cp (or
  //     got_src_revision_cp if it is not set).
  // {%commit%} -> commit hash from got_revision.
  // {%timestamp%} -> UTC timestamp in %Y%m%d%H%M%S.
  // {$chromium_version%} -> Chromium version extracted from chrome/VERSION file
  //     in {major}.{minor}.{build}.{patch} format.
  // {%builder_name%} -> name of the builder, fetched from buildbucket
  // {%build_number%} -> number of the current build, fetched from buildbucket
  // Custom string substitutions are also supported through the 'custom_vars'
  // parameter in generic_archive().
  string gcs_path = 4;

  enum ArchiveType {
    ARCHIVE_TYPE_UNSPECIFIED = 0;

    // All input files and directories are zipped. gcs_path should be a path
    // whose final component is the name of the archive file.
    // This is the default if nothing is set.
    ARCHIVE_TYPE_ZIP = 1;

    // Upload files unchanged. Directories are not supported. gcs_path should
    // be a path to a directory where the uploaded files will be placed.
    ARCHIVE_TYPE_FILES = 2;

    // All input files and dirs are tar gzipped. gcs_path should be a path
    // whose final component is the name of the archive file.
    ARCHIVE_TYPE_TAR_GZ = 3;

    // Recursively upload directories and subdirectories. Files are not
    // supported. gcs_path should be a path to the directory where the uploaded
    // items will be placed.
    ARCHIVE_TYPE_RECURSIVE = 4;

    // Upload files flattened such that the file is uploaded directly to the
    // gcs_path directory. ie/ cronet/VERSION file would be uploaded to
    // "gs://{bucket}/test", resulting in {bucket}/test/VERSION. Directories
    // are not supported.
    ARCHIVE_TYPE_FLATTEN_FILES = 5;

    // Similar to ARCHIVE_TYPE_ZIP. But using squashfs tool to compress image.
    // See https://github.com/plougher/squashfs-tools for more information
    // about squashfs format.
    ARCHIVE_TYPE_SQUASHFS = 6;
  }
  ArchiveType archive_type = 5;
  // When set, system will update the latest file.
  // Example:
  //   gcs_path = "x86/{%position%}/chrome.zip"
  //   latest_upload['gcs_path'] = "x86/latest/chrome.txt"
  //   latest_upload['gcs_file_content'] = "{%position%}"
  // In this way, the "x86/latest/chrome.txt" will include the latest
  // version info.
  LatestFile latest_upload = 7;

  // A string path to the key used to verify bits. Setting this parameter will
  // generated a .sig signed version for the files listed in this ArchiveData
  // definition and upload it to the GCS path in this config. This path is
  // NOT relative to the out dir. Please visit
  // https://chromium.googlesource.com/infra/infra/+/refs/heads/master/recipes/
  // recipe_modules/cloudkms/api.py#48 for details on the underlying call.
  string verifiable_key_path = 8;

  // A string key to override the default base directory (build dir)
  // for the given file(s), dir(s) for this ArchiveData definition.
  // The provided key is appended to the chromium checkout path.
  // This key is not required and simply defaults to build dir if
  // not provided.
  string base_dir = 9;

  // If sets to true, only upload after tests are run successfully.
  bool only_upload_on_tests_success = 11;
}

message Compression {
  // compression_level ([0-9]) - Deflate compression level.
  // (0 - disable, 1 - best speed, 9 - best compression).
  int32 compression_level = 1;
}

message Verification {
  // Maximum time to wait for backend-side package hash verification during
  // package upload. (e.g. '200s', '5m')
  string verification_timeout = 1;
}

// Next id: 8
message CIPDArchiveData {
  // Path to YAML package definition files (relative to build directory).
  repeated string yaml_files = 1;

  // A list of ref names to set for the package instance.
  repeated string refs = 2;

  // A map of tag name -> value to set for the package instance.
  map<string, string> tags = 3;

  // A map of var name -> value to use for vars referenced in package
  // definition file.
  map<string, string> pkg_vars = 4;

  // Sets the compression level.
  Compression compression = 5;

  // Sets time for verification
  Verification verification = 6;

  // If sets to true, add refs to the build only after tests are run
  // successfully.
  bool only_set_refs_on_tests_success = 7;
}

// Next id: 4
message InputProperties {
  repeated ArchiveData archive_datas = 1;
  repeated CIPDArchiveData cipd_archive_datas = 2;

  // The path (relative to checkout_dir) to the file containing
  // specs for archive data. archive_datas and cipd_archive_datas will both
  // be ignored if this path is specfied.
  //
  // An example file looks like
  // {
  //   "cipd_archive_datas": [{
  //     "yaml_files": ["foo",],
  //     "refs": ["{%channel%}",],
  //     "tags": {
  //       "version": "2.3.4.5",
  //     },
  //   },],
  // }
  repeated string source_side_spec_path = 3;
}
