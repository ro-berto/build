// Copyright 2020 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
syntax = "proto3";

package recipe_modules.build.reclient;

// NEXT ID TO USE: 11
message InputProperties {
  // This is to specify the RBE instance
  // This needs to be a GCP project ID to use default instance, or full
  // RBE-CAS instance name
  // e.g. `projects/<project name>/instances/<instance name>`.
  string instance = 1;

  // The remote execution service to dial when calling via gRPC.
  string service = 2;

  // The number of jobs to run in parallel, i.e. `-j`
  int32 jobs = 3;

  // Map of flags to be passed to rewrapper calls through environment
  // variables. The flag names must be prefixed with The "RBE_". It may
  // include values such as the reproxy address (ie RBE_server_address),
  // but it can't include usage specific values such as RBE_exec_root
  // and RBE_platform.
  map<string, string> rewrapper_env = 4;

  // The GCP project to which reclient should publish metrics.
  string metrics_project = 5;

  // Service name for cloud profiler.
  // If not empty, use cloud profiler in GCP project for the RBE instance.
  string profiler_service = 6;

  // Publish trace by rpl2cloudtrace to the cloud trace
  // in the GCP project for the RBE instance.
  bool publish_trace = 7;

  // This specifies a cache silo key, which is added to the key used for
  // caching remote actions.  This allows remote build caches to be
  // segregated if so desired.  This is useful in cases such as performance
  // testing.
  string cache_silo = 8;

  // Postprocess step fails either no artifacts verified or mismatch found.
  // This is expected to set to a builder to verify build artifacts are the
  // same between remote and local.  Such builders must confirm compile
  // runs with verify mode and no mismatches.
  // It also sets jobs to platform's cpu count.
  bool ensure_verified = 9;

  // Indicates whether reproxy should fail the build if a predefined rate
  // of local fallbacks are encountered. This prevents builds making slow
  // progress without detecting the underlying cause of widespread local
  // fallbacks.
  bool fail_early = 10;
}
