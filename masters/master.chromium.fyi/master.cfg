# vim: ft=python:
# Copyright (c) 2012 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

from buildbot.changes.filter import ChangeFilter
from buildbot.process.properties import WithProperties
from buildbot.scheduler import Dependent
from buildbot.scheduler import Nightly
from buildbot.scheduler import Periodic
from buildbot.scheduler import Scheduler
from buildbot.scheduler import Triggerable
from buildbot.status.mail import MailNotifier

from common import chromium_utils

# These modules come from scripts/master, which must be in the PYTHONPATH.
from master import build_utils
from master import chromium_notifier
from master import failures_notifier
from master import master_config
from master import master_utils
from master import slaves_list
from master import gitiles_poller

from master.factory import annotator_factory
from master.factory import remote_run_factory

# These modules come from scripts/common, which must be in the PYTHONPATH.
import config
import master_site_config

ActiveMaster = master_site_config.ChromiumFYI

STATUS_PUSH = False

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}
c['status'] = []

# Force merging of requests.
c['mergeRequests'] = lambda *args, **kwargs: True

config.DatabaseSetup(c)

####### CHANGESOURCES

# Polls config.Master.trunk_url for changes
chromium_repo_url = config.Master.git_server_url + '/chromium/src'
trunk_poller = gitiles_poller.GitilesPoller(chromium_repo_url,
                                            project='chromium')

c['change_source'] = [trunk_poller]

# Number of machines to shard ash browser_tests over.
ASH_SHARDS = 2

####### SCHEDULERS

## configure the Schedulers

# Main scheduler for all changes in trunk.
s_chromium = Scheduler(
    name='chromium',
    treeStableTimer=60,
    change_filter=ChangeFilter(project='chromium', branch='master'),
    builderNames=['Chromium Windows Analyze',

                  'Win Builder Goma Canary',
                  'Win Builder (dbg) Goma Canary',
                  'Win Goma Canary LocalOutputCache',
                  'Win cl.exe Goma Canary LocalOutputCache',
                  'Win7 Builder Goma Canary',
                  'Win7 Builder (dbg) Goma Canary',
                  'WinMSVC64 Goma Canary',
                  'Chromium Win PGO Builder',
                  'Chromium Win x64 PGO Builder',
                  'Android Builder (dbg)',
                  'Android Builder (dbg) Goma Canary',
                  'chromeos-amd64-generic-rel-goma-canary',
                  'Linux Builder Goma Canary',
                  'Linux x64 Goma Canary (clobber)',
                  'Linux x64 Goma Canary LocalOutputCache',
                  'Mac Builder Goma Canary',
                  'Mac Builder (dbg) Goma Canary',
                  'Mac Goma Canary (clobber)',
                  'Mac Builder (dbg) Goma Canary (clobber)',
                  'Mac Goma Canary LocalOutputCache',
                  'Chromium Mac 10.10 MacViews',
                  'Chromium Mac 10.13',
                  'Linux ARM',
                  'Headless Linux (dbg)',
                  'Ozone Linux',
                  'VR Linux',
                  'Fuchsia',
                  'Fuchsia (dbg)',
                  'Fuchsia ARM64',
                  'Site Isolation Android',
                  'Site Isolation Linux',
                  'Site Isolation Win',
                  'Browser Side Navigation Linux',
                  'Closure Compilation Linux',
                  'Win 10 Fast Ring',
                  'Afl Upload Linux ASan',
                  'Libfuzzer Upload Linux ASan',
                  'Libfuzzer Upload Linux ASan Debug',
                  'Libfuzzer Upload Linux MSan',
                  'Libfuzzer Upload Linux UBSan',
                  'Libfuzzer Upload Mac ASan',
                  'Linux remote_run Builder',
                  'ios-device-goma-canary-clobber',
                  'ios-simulator',
                  'ios-simulator-cronet',
                  'ios-webview',
                  'Mojo ChromiumOS',
                  'Mojo Linux',
                  'Mojo Windows',
                  'Android deterministic',
                  'Mac deterministic',
                  'Windows deterministic',
                  'Windows Clang deterministic',
                  'Android deterministic (dbg)',
                  'Linux deterministic (dbg)',
                  'Mac deterministic (dbg)',
                  'Chromium DevTools Linux',
                  'Out of Process Profiling Android',
                  'Out of Process Profiling Linux',
                  'Out of Process Profiling Mac',
                  'Out of Process Profiling Windows',
                  'Linux Clang Analyzer',
                  'Jumbo Linux x64',
                  'Jumbo Mac',
                  'Jumbo Win x64',
                  'Leak Detection Linux',
                  'Linux Viz',
                  ])

# Triggerable scheduler for Android Builder
s_chromium_android_dbg = Triggerable(
    name='android_dbg',
    builderNames=['Android ChromeDriver Tests (dbg)',
                  'Android Remoting Tests',
                  'Android VR Tests',])

s_android_find_annotated_test = Nightly(
    name='android_find_annotated_test',
    branch='master',
    minute=0,
    hour=range(0,24,3),
    builderNames=['Android Find Annotated Test'])


c['schedulers'] = [s_chromium,
                   s_chromium_android_dbg,
                   s_android_find_annotated_test,
]

####### BUILDERS

# buildbot/process/factory.py provides several BuildFactory classes you can
# start with, which implement build processes for common targets (GNU
# autoconf projects, CPAN perl modules, etc). The factory.BuildFactory is the
# base class, and is configured with a series of BuildSteps. When the build
# is run, the appropriate buildslave is told to execute each Step in turn.

# the first BuildStep is typically responsible for obtaining a copy of the
# sources. There are source-obtaining Steps in buildbot/process/step.py for
# CVS, SVN, and others.

builders = []

# ----------------------------------------------------------------------------
# FACTORIES

chromium_rel_archive = master_config.GetGSUtilUrl(
    'chromium-build-transfer', 'Chromium FYI Builder')

chromium_dbg_archive = master_config.GetGSUtilUrl(
    'chromium-build-transfer', 'Chromium FYI Builder (dbg)')

chromium_android_fyi_dbg_archive = master_config.GetGSUtilUrl(
    'chromium-fyi-archive', 'chromium.fyi/Android Builder (dbg)')

# The identifier of the factory is the build configuration. If two factories
# are using the same build configuration, they should have the same identifier.
f_chromium_win_pgo_builder = \
    annotator_factory.AnnotatorFactory().BaseFactory(recipe='chromium_pgo',
                                                     timeout=24000)

f_chromium_win_x64_pgo_builder = \
    annotator_factory.AnnotatorFactory().BaseFactory(recipe='chromium_pgo',
                                                     timeout=24000)

f_win_analyze = \
  annotator_factory.AnnotatorFactory().BaseFactory(
    recipe='win_analyze')

def without(these, notthese):
  return [x for x in these if x not in notthese]

tests_win_1 = ['base_unittests',
               'cacheinvalidation_unittests',
               'chrome_elf_unittests',
               'components_unittests',
               'courgette_unittests',
               'crypto_unittests',
               'device_unittests',
               'extensions_unittests',
               'gcm_unit_tests',
               'google_apis_unittests',
               'gpu',
               'installer',
               'jingle',
               'media',
               'net',
               'ppapi_unittests',
               'printing',
               'remoting',
               'sandbox',
               'unit',
               'url_unittests',
]
tests_win_2 = ['browser_tests',
               'content_browsertests']

win_x64_tests = [
  'base_unittests',
  'cacheinvalidation_unittests',
  'cc_unittests',
  'chromedriver_unittests',
  'components_unittests',
  'content_browsertests',
  'courgette_unittests',
  'crypto_unittests',
  'gcm_unit_tests',
  'gpu',
  'installer',
  'interactive_ui_tests',
  'jingle',
  'media',
  'nacl_integration',
  'net',
  'ppapi_unittests',
  'printing',
  'remoting',
  'sandbox',
  'unit',
  'url_unittests',

  # These are long, so do them last
  'browser_tests',
  'sync_integration',
]

f_chromium_dbg_android_mips_builder = \
  annotator_factory.AnnotatorFactory().BaseFactory(
    recipe='android/builder')

f_chromium_dbg_android_x86_builder = \
  annotator_factory.AnnotatorFactory().BaseFactory(
    recipe='android/builder')

def m_remote_run(recipe, **kwargs):
  return remote_run_factory.RemoteRunFactory(
      active_master=ActiveMaster,
      repository='https://chromium.googlesource.com/chromium/tools/build.git',
      recipe=recipe,
      factory_properties={'path_config': 'kitchen'},
      **kwargs)

f_chromium_mac_1010 = m_remote_run('chromium')

f_chromium_mac_1010_mac_views = m_remote_run('chromium')

f_chromium_mac_1013 = m_remote_run('chromium')

# ----------------------------------------------------------------------------
# BUILDER DEFINITIONS

# The 'builders' list defines the Builders. Each one is configured with a
# dictionary, using the following keys:
#  name (required): the name used to describe this bilder
#  slavename (required): which slave to use, must appear in c['slaves']
#  builddir (optional): which subdirectory to run the builder in
#  factory (required): a BuildFactory to define how the build is run
#  periodicBuildTime (optional): if set, force a build every N seconds
#  category (optional): it is not used in the normal 'buildbot' meaning. It is
#                       used by gatekeeper to determine which steps it should
#                       look for to close the tree.
#

m_annotator = annotator_factory.AnnotatorFactory()

b_chromium_win_analyze = {'name': 'Chromium Windows Analyze',
  'builddir': 'Chromium_Windows_Analyze',
  'factory': f_win_analyze,
  'auto_reboot': False,
}

b_chromium_win_pgo_builder = {
  'name': 'Chromium Win PGO Builder',
  'builddir': 'chromium-win-pgo-builder',
  'factory': f_chromium_win_pgo_builder,
  'category': 'windows',
  'auto_reboot': True,
}

b_chromium_win_x64_pgo_builder = {
  'name': 'Chromium Win x64 PGO Builder',
  'builddir': 'chromium-win-x64-pgo-builder',
  'factory': f_chromium_win_x64_pgo_builder,
  'category': 'windows',
  'auto_reboot': True,
}

b_chromium_win_goma = {
  'name': 'Win Builder Goma Canary',
  'factory': m_remote_run('chromium'),
  'category': 'goma',
  'auto_reboot': True,
}

b_chromium_win_goma_dbg = {
  'name': 'Win Builder (dbg) Goma Canary',
  'factory': m_remote_run('chromium'),
  'category': 'goma',
  'auto_reboot': True,
}

b_chromium_win_goma_local_output_cache = {
  'name': 'Win Goma Canary LocalOutputCache',
  'factory': m_remote_run('chromium'),
  'category': 'goma',
  'auto_reboot': True,
}

b_chromium_win_clexe_goma_local_output_cache = {
  'name': 'Win cl.exe Goma Canary LocalOutputCache',
  'factory': m_remote_run('chromium'),
  'category': 'goma',
  'auto_reboot': True,
}

b_chromium_win7_goma = {
  'name': 'Win7 Builder Goma Canary',
  'factory': m_remote_run('chromium'),
  'category': 'goma',
  'auto_reboot': True,
}

b_chromium_win7_goma_dbg = {
  'name': 'Win7 Builder (dbg) Goma Canary',
  'factory': m_remote_run('chromium', timeout=3600),
  'category': 'goma',
  'auto_reboot': True,
}

b_chromium_win_clexe_goma = {
  'name': 'WinMSVC64 Goma Canary',
  'factory': m_remote_run('chromium'),
  'category': 'goma',
  'auto_reboot': True,
}

b_clang_tot_linux_static_analyzer = {
  'name': 'Linux Clang Analyzer',
  'factory': m_remote_run('chromium'),
  'category': 'clang tot',
  'auto_reboot': False,
}

b_chromium_dbg_android_builder = {
  'name': 'Android Builder (dbg)',
  'factory': m_remote_run(
      recipe='chromium', triggers=['android_dbg']),
  'category': 'android_builder',
}

b_chromium_dbg_android_builder_goma_canary = {
  'name': 'Android Builder (dbg) Goma Canary',
  'factory': m_remote_run(recipe='chromium'),
  'category': 'goma',
  'auto_reboot': True,
}

b_chromium_rel_android_remoting_tests = {
  'name': 'Android Remoting Tests',
  'factory': m_remote_run('chromium'),
  'category': 'android_tests',
}

b_chromium_rel_android_find_annotated_test = {
  'name': 'Android Find Annotated Test',
  'factory': m_remote_run('chromium'),
  'category': 'android_tests',
}

b_chromium_dbg_android_chromedriver_tests = {
  'name': 'Android ChromeDriver Tests (dbg)',
  'factory': annotator_factory.AnnotatorFactory().BaseFactory(
      recipe='chromedriver'),
  'category': 'android_tests',
}

b_chromium_dbg_android_vr_tests = {
  'name': 'Android VR Tests',
  'factory': m_remote_run('chromium'),
  'category': 'android_tests',
}

b_chromeos_amd64_chromium_goma_canary = {
  'name': 'chromeos-amd64-generic-rel-goma-canary',
  'factory': m_remote_run('chromium'),
  'category': 'goma',
  'auto_reboot': True,
}

b_chromium_linux_goma_canary = {
  'name': 'Linux Builder Goma Canary',
  'factory': m_remote_run('chromium'),
  'category': 'goma',
  'auto_reboot': True,
}

b_chromium_linux_goma_canary_clobber = {
  'name': 'Linux x64 Goma Canary (clobber)',
  'factory': m_remote_run('chromium'),
  'category': 'goma',
  'auto_reboot': True,
}

b_chromium_linux_goma_canary_local_output_cache = {
  'name': 'Linux x64 Goma Canary LocalOutputCache',
  'factory': m_remote_run('chromium'),
  'category': 'goma',
  'auto_reboot': True,
}

b_chromium_mac_rel_goma_canary = {
  'name': 'Mac Builder Goma Canary',
  'factory': m_remote_run('chromium'),
  'category': 'goma',
  'auto_reboot': True,
}

b_chromium_mac_dbg_goma_canary = {
  'name': 'Mac Builder (dbg) Goma Canary',
  'factory': m_remote_run('chromium'),
  'category': 'goma',
  'auto_reboot': True,
}

b_chromium_mac_rel_goma_canary_clobber = {
  'name': 'Mac Goma Canary (clobber)',
  'factory': m_remote_run('chromium'),
  'category': 'goma',
  'auto_reboot': True,
}

b_chromium_mac_dbg_goma_canary_clobber = {
  'name': 'Mac Builder (dbg) Goma Canary (clobber)',
  'factory': m_remote_run('chromium'),
  'category': 'goma',
  'auto_reboot': True,
}

b_chromium_mac_goma_canary_local_output_cache = {
  'name': 'Mac Goma Canary LocalOutputCache',
  'factory': m_remote_run('chromium'),
  'category': 'goma',
  'auto_reboot': True,
}

b_chromium_mac_1010_mac_views = {
  'name': 'Chromium Mac 10.10 MacViews',
  'factory': f_chromium_mac_1010_mac_views,
  'auto_reboot': True,
}

b_chromium_mac_1013 = {
  'name': 'Chromium Mac 10.13',
  'factory': f_chromium_mac_1013,
  'auto_reboot': True,
}

b_linux_arm = {
  'name': 'Linux ARM',
  'factory': m_remote_run('chromium'),
  'category': 'linux',
  'auto_reboot': False,
}

b_headless_linux = {
    'name': 'Headless Linux (dbg)',
    'factory': m_remote_run('chromium'),
    'category': 'linux',
}

b_chromium_ozone_linux = {
  'name': 'Ozone Linux',
  'factory': m_remote_run('chromium'),
  'category': 'linux',
  'auto_reboot': True,
}

b_vr_linux = {
  'name': 'VR Linux',
  'factory': m_remote_run('chromium'),
  'category': 'linux',
}

b_chromium_fuchsia = {
  'name': 'Fuchsia',
  'factory': m_remote_run('chromium'),
  'category': 'fuchsia',
  'auto_reboot': True,
}

b_chromium_fuchsia_dbg = {
  'name': 'Fuchsia (dbg)',
  'factory': m_remote_run('chromium'),
  'category': 'fuchsia',
  'auto_reboot': True,
}

b_chromium_fuchsia_arm64 = {
  'name': 'Fuchsia ARM64',
  'factory': m_remote_run('chromium'),
  'category': 'fuchsia',
  'auto_reboot': True,
}

b_chromium_site_isolation_android = {
  'name': 'Site Isolation Android',
  'factory': m_remote_run('chromium'),
  'category': 'site_isolation',
  'auto_reboot': True,
}

b_chromium_site_isolation_linux = {
  'name': 'Site Isolation Linux',
  'factory': m_remote_run('chromium'),
  'category': 'site_isolation',
  'auto_reboot': True,
}

b_chromium_site_isolation_win = {
  'name': 'Site Isolation Win',
  'factory': m_remote_run('chromium'),
  'category': 'site_isolation',
  'auto_reboot': True,
}

b_chromium_browser_side_navigation_linux = {
  'name': 'Browser Side Navigation Linux',
  'factory': m_remote_run('chromium'),
  'category': 'site_isolation',
  'auto_reboot': True,
}

b_chromium_closure_compilation_linux = {
  'name': 'Closure Compilation Linux',
  'factory': annotator_factory.AnnotatorFactory().BaseFactory(
      recipe='closure_compilation'),
  'category': 'closure_compilation',
  'auto_reboot': True,
}

b_win_10_fast_ring = {
  'name': 'Win 10 Fast Ring',
  'factory': m_remote_run('chromium'),
  'category': 'win10',
  'auto_reboot': True,
}

b_chromium_afl_upload_linux_asan = {
  'name': 'Afl Upload Linux ASan',
  'factory': m_annotator.BaseFactory('chromium_afl',
                                     timeout=24000),
  'category': 'chromium_afl',
  'auto_reboot': True,
}

b_chromium_libfuzzer_upload_linux_asan = {
  'name': 'Libfuzzer Upload Linux ASan',
  'factory': m_annotator.BaseFactory('chromium_libfuzzer',
                                     timeout=24000),
  'category': 'chromium_libfuzzer',
  'auto_reboot': True,
}

b_chromium_libfuzzer_upload_linux_asan_debug = {
  'name': 'Libfuzzer Upload Linux ASan Debug',
  'factory': m_annotator.BaseFactory('chromium_libfuzzer',
                                     timeout=24000),
  'category': 'chromium_libfuzzer',
  'auto_reboot': True,
}

b_chromium_libfuzzer_upload_linux_msan = {
  'name': 'Libfuzzer Upload Linux MSan',
  'factory': m_annotator.BaseFactory('chromium_libfuzzer',
                                     timeout=24000),
  'category': 'chromium_libfuzzer',
  'auto_reboot': True,
}

b_chromium_libfuzzer_upload_linux_ubsan = {
  'name': 'Libfuzzer Upload Linux UBSan',
  'factory': m_annotator.BaseFactory('chromium_libfuzzer',
                                     timeout=24000),
  'category': 'chromium_libfuzzer',
  'auto_reboot': True,
}

b_chromium_libfuzzer_upload_mac_asan = {
  'name': 'Libfuzzer Upload Mac ASan',
  'factory': m_annotator.BaseFactory('chromium_libfuzzer',
                                     timeout=24000),
  'category': 'chromium_libfuzzer',
  'auto_reboot': True,
}

b_webview_ios = {
  'name': 'ios-webview',
  'factory': annotator_factory.AnnotatorFactory().BaseFactory(
    'ios/unified_builder_tester'
  ),
  'category': 'web_view',
  'auto_reboot': True,
}

b_gomacanary_ios = {
  'name': 'ios-device-goma-canary-clobber',
  'factory': annotator_factory.AnnotatorFactory().BaseFactory(
    'ios/unified_builder_tester'
  ),
  'category': 'goma',
  'auto_reboot': True,
}

b_simulator_ios = {
  'name': 'ios-simulator',
  'factory': annotator_factory.AnnotatorFactory().BaseFactory(
    'ios/unified_builder_tester'
  ),
  'category': 'iOS',
  'auto_reboot': True,
}

b_simulator_ios_cronet = {
  'name': 'ios-simulator-cronet',
  'factory': annotator_factory.AnnotatorFactory().BaseFactory(
    'ios/unified_builder_tester'
  ),
  'category': 'cronet',
  'auto_reboot': True,
}

b_mojo_chromiumos = {
  'name': 'Mojo ChromiumOS',
  'factory': m_remote_run('chromium'),
  'category': 'mojo',
  'auto_reboot': True,
}

b_mojo_linux = {
  'name': 'Mojo Linux',
  'factory': m_remote_run('chromium'),
  'category': 'mojo',
  'auto_reboot': True,
}

b_mojo_windows = {
  'name': 'Mojo Windows',
  'factory': m_remote_run('chromium'),
  'category': 'mojo',
  'auto_reboot': True,
}

b_chromium_devtools_linux = {
  'name': 'Chromium DevTools Linux',
  'factory': m_annotator.BaseFactory(recipe='devtools'),
  'category': 'devtools',
  'auto_reboot': True,
}

b_chromium_oop_profiling_android = {
  'name': 'Out of Process Profiling Android',
  'factory': m_remote_run('chromium'),
  'category': 'oop_profiling',
  'auto_reboot': True,
}

b_chromium_oop_profiling_linux = {
  'name': 'Out of Process Profiling Linux',
  'factory': m_remote_run('chromium'),
  'category': 'oop_profiling',
  'auto_reboot': True,
}

b_chromium_oop_profiling_mac = {
  'name': 'Out of Process Profiling Mac',
  'factory': m_remote_run('chromium'),
  'category': 'oop_profiling',
  'auto_reboot': True,
}

b_chromium_oop_profiling_windows = {
  'name': 'Out of Process Profiling Windows',
  'factory': m_remote_run('chromium'),
  'category': 'oop_profiling',
  'auto_reboot': True,
}

b_leak_detection_linux = {
  'name': 'Leak Detection Linux',
  'factory': m_remote_run('chromium'),
  'category': 'linux',
}

def DeterministicBuilder(platform, debug=False):
  suffix = ''
  configuration = 'Release'
  if debug:
    suffix = ' (dbg)'
    configuration = 'Debug'
  return  {
      'name': '%s deterministic%s' % (platform, suffix),
      # Work around an issue with NaCl build.
      'slavebuilddir': 'chr',
      'factory': annotator_factory.AnnotatorFactory().BaseFactory(
          'swarming/deterministic_build',
          factory_properties = {
            'configuration': configuration,
          }),
      # Auto-reboot:
      # - On windows to try to clear up TEMP fill up issues.
      # - On OSX due to fork: Resource temporarily unavailable
      'auto_reboot': True,
      'category': 'deterministic',
    }

b_android_deterministic_build = DeterministicBuilder('Android')
b_mac_deterministic_build = DeterministicBuilder('Mac')
b_windows_deterministic_build = DeterministicBuilder('Windows')
b_windows_clang_deterministic_build = DeterministicBuilder('Windows Clang')
b_android_deterministic_dbg_build = DeterministicBuilder('Android', debug=True)
b_linux_deterministic_dbg_build = DeterministicBuilder('Linux', debug=True)
b_mac_deterministic_dbg_build = DeterministicBuilder('Mac', debug=True)

b_jumbo_linux = {
  'name': 'Jumbo Linux x64',
  'factory': m_remote_run('chromium'),
  'category': 'jumbo',
  'auto_reboot': True,
}

b_jumbo_mac = {
  'name': 'Jumbo Mac',
  'factory': m_remote_run('chromium'),
  'category': 'jumbo',
  'auto_reboot': True,
}

b_jumbo_win = {
  'name': 'Jumbo Win x64',
  'factory': m_remote_run('chromium'),
  'category': 'jumbo',
  'auto_reboot': True,
}

b_linux_viz = {
  'name': 'Linux Viz',
  'factory': m_remote_run('chromium'),
  'category': 'viz',
  'auto_reboot': True,
}

c['builders'] = [
  # Windows release
  b_chromium_win_goma,
  b_chromium_win_goma_dbg,
  b_chromium_win_goma_local_output_cache,
  b_chromium_win_clexe_goma_local_output_cache,
  b_chromium_win7_goma,
  b_chromium_win7_goma_dbg,
  b_chromium_win_clexe_goma,
  b_chromium_win_pgo_builder,
  b_chromium_win_x64_pgo_builder,

  # Mac BuilderTesters
  b_chromium_mac_rel_goma_canary,
  b_chromium_mac_dbg_goma_canary,
  b_chromium_mac_rel_goma_canary_clobber,
  b_chromium_mac_dbg_goma_canary_clobber,
  b_chromium_mac_goma_canary_local_output_cache,
  b_chromium_mac_1010_mac_views,
  b_chromium_mac_1013,

  # Windows /Analyze builder
  b_chromium_win_analyze,

  # ChromeOS BuilderTesters
  b_chromeos_amd64_chromium_goma_canary,

  # Linux BuilderTesters
  b_chromium_linux_goma_canary,
  b_chromium_linux_goma_canary_clobber,
  b_chromium_linux_goma_canary_local_output_cache,

  # Linux ARM
  b_linux_arm,

  # Android
  b_chromium_dbg_android_builder,
  b_chromium_dbg_android_builder_goma_canary,
  b_chromium_rel_android_remoting_tests,
  b_chromium_rel_android_find_annotated_test,
  b_chromium_dbg_android_vr_tests,

  b_chromium_dbg_android_chromedriver_tests,

  # Sanitizers
  b_chromium_afl_upload_linux_asan,
  b_chromium_libfuzzer_upload_linux_asan,
  b_chromium_libfuzzer_upload_linux_asan_debug,
  b_chromium_libfuzzer_upload_linux_msan,
  b_chromium_libfuzzer_upload_linux_ubsan,
  b_chromium_libfuzzer_upload_mac_asan,

  # Headles BuilderTester
  b_headless_linux,

  # Desktop linux with ozone
  b_chromium_ozone_linux,

  # VR
  b_vr_linux,

  # Fuchsia
  b_chromium_fuchsia,
  b_chromium_fuchsia_dbg,
  b_chromium_fuchsia_arm64,

  # Site Isolation
  b_chromium_site_isolation_android,
  b_chromium_site_isolation_linux,
  b_chromium_site_isolation_win,
  b_chromium_browser_side_navigation_linux,

  # Closure Compilation
  b_chromium_closure_compilation_linux,

  b_clang_tot_linux_static_analyzer,

  # Windows 10 Fast Ring (early releases of Win 10).
  b_win_10_fast_ring,

  # Goma canary
  b_gomacanary_ios,

  # ios-simulator
  b_simulator_ios,

  # ios-simulator-cronet
  b_simulator_ios_cronet,

  # web_view bot
  b_webview_ios,

  # Mojo bots.
  b_mojo_chromiumos,
  b_mojo_linux,
  b_mojo_windows,

  # Deterministic build bot
  b_android_deterministic_build,
  b_mac_deterministic_build,
  b_windows_deterministic_build,
  b_windows_clang_deterministic_build,
  b_android_deterministic_dbg_build,
  b_linux_deterministic_dbg_build,
  b_mac_deterministic_dbg_build,

  # Chromium DevTools
  b_chromium_devtools_linux,

  # Out of Process Profiling
  b_chromium_oop_profiling_android,
  b_chromium_oop_profiling_linux,
  b_chromium_oop_profiling_mac,
  b_chromium_oop_profiling_windows,

  # Jumbo Builders
  b_jumbo_linux,
  b_jumbo_mac,
  b_jumbo_win,

  # Leak Detection
  b_leak_detection_linux,

  # Viz bot
  b_linux_viz,
]

c['builders'].extend([
  {
    'name': 'Linux remote_run Builder',
    'factory': m_remote_run('chromium', timeout=2400, max_time=10800),
    'category': 'remote_run',
    'auto_reboot': True,
  },
  {
    'name': 'Linux remote_run Tester',
    'factory': m_remote_run('chromium'),
    'category': 'remote_run',
    'auto_reboot': True,
  },
])

# Associate the slaves to the manual builders. The configuration is in
# slaves.cfg.
slaves = slaves_list.SlavesList('slaves.cfg', 'ChromiumFYI')
for builder in c['builders']:
  builder['slavenames'] = slaves.GetSlavesName(builder=builder['name'])


####### BUILDSLAVES

# The 'slaves' list defines the set of allowable buildslaves. List all the
# slaves registered to a builder. Remove dupes.
c['slaves'] = master_utils.AutoSetupSlaves(c['builders'],
                                           config.Master.GetBotPassword())

# Make sure everything works together.
master_utils.VerifySetup(c, slaves)


####### STATUS TARGETS

# Buildbot master url:
# Must come before AutoSetupMaster().
c['buildbotURL'] = ActiveMaster.buildbot_url

# Adds common status and tools to this master.
master_utils.AutoSetupMaster(
    c, ActiveMaster,
    public_html="../master.chromium/public_html",
    templates=['../master.chromium/templates'],
    enable_http_status_push=ActiveMaster.is_production_host,
    order_console_by_time=True)

# Add more.

if STATUS_PUSH:
  from buildbot.status.status_push import HttpStatusPush
  c['status'].append(HttpStatusPush(
      'http://craebuild.appspot.com/status-listener'))

c['status'].append(failures_notifier.FailuresNotifier(
      fromaddr=ActiveMaster.from_address,  # Reply-To address
      mode='failing',
      categories=['goma'],
      relayhost=config.Master.smtp,
      subject='goma canary buildbot %(result)s in %(projectName)s '
              'on %(builder)s',
      extraRecipients=[
           'ukai@google.com',
           'yyanagisawa@google.com',
           'shinyak@google.com',
           'tikuta@google.com',
      ],
      sendToInterestedUsers=False,
      forgiving_steps=['diagnose_goma']))

c['status'].append(MailNotifier(
      fromaddr=ActiveMaster.from_address,  # Reply-To address
      mode='failing',
      relayhost=config.Master.smtp,
      subject='Build failure on %(builder)s',
      extraRecipients=['chrome-pgo-build-failure@chromium.org',],
      sendToInterestedUsers=False,  # don't send e-mails to the committers.
      builders=[
          'Chromium Win PGO Builder',
          'Chromium Win x64 PGO Builder',
      ]))

c['status'].append(MailNotifier(
      fromaddr=ActiveMaster.from_address,  # Reply-To address
      mode='failing',
      relayhost=config.Master.smtp,
      subject='Build failure on %(builder)s',
      extraRecipients=['sbc@chromium.org'],
      sendToInterestedUsers=False,
      builders=['Linux ARM']))
