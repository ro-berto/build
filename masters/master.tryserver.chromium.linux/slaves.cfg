# -*- python -*-
# ex: set syntax=python:
# Copyright 2014 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

# See master.experimental/slaves.cfg for documentation.

def linux():
  cq_slaves = (range(111, 131) + range(162, 399) + range(427, 453) +
               range(493, 497) + range(506, 540) + range(590, 600) +
               range(621, 651) + range(779, 799) + range(800, 837) +
               range(841, 864) + range(878, 897))
  cq_builders = [
    'cast_shell_linux',
    'cast_shell_audio_linux',
    'fuchsia_arm64',
    'fuchsia_x64',
    'linux_chromium_archive_rel_ng',
    'linux_chromium_asan_rel_ng',
    'linux_chromium_chromeos_asan_rel_ng',
    'linux_chromium_clobber_rel_ng',
    'linux_chromium_ozone_compile_only_ng',
    'linux_chromium_tsan_rel_ng',
    'linux_mojo',
    'linux_site_isolation',
    'linux_vr',
  ]

  # Slave pools have two competing constraints:
  #  - load: peak number of concurrent builds. Larger pools are safer.
  #  - disk space: too many builders on the same pool will exhaust
  #     the disk space on all slaves. Smaller pools are safer.
  #
  # Currently, we need two optional pools due to disk space. When
  # adding new builders, try sharing the existing slavebuilddir.
  optional_slaves1 = [568, 747, 775, 866, 867, 1403, 1404, 1405] + range(1098, 1102)
  optional_slaves2 = range(714, 719)

  # Contain all the builders with the following large slavebuilddir:
  #  - linux
  #  - linux_chromeos
  #  - linux_msan
  optional_builders1 = [                      # slavebuilddir
    'closure_compilation',                    # linux
    'fuchsia_arm64_cast_audio',               # linux
    'fuchsia_x64_cast_audio',                 # linux
    'linux-annotator-rel',                    # linux
    'linux_chromium_compile_dbg_32_ng',       # linux
    'linux_chromium_dbg_32_ng',               # linux
    'linux_chromium_msan_rel_ng',             # linux_msan
    'linux_chromium_xenial_rel_ng',           # linux
    'linux_chromium_browser_side_navigation_rel', # linux
    'linux_chromium_analysis',                # linux
    'linux_mojo_chromeos',                    # linux_chromeos
    'linux_layout_tests_layout_ng',           # linux
    'linux_layout_tests_root_layer_scrolls',  # linux
    'linux_layout_tests_slimming_paint_v2',   # linux
  ]

  optional_builders2 = [
    'linux_arm',                              # linux_arm
    'linux_chromium_chromeos_msan_rel_ng',    # linux_chromeos_msan
    'linux_chromium_gn_upload',               # build_and_upload_gn
    'linux_nacl_sdk',                         # linux_nacl_sdk
    'linux_nacl_sdk_build',                   # linux_nacl_sdk_build
    'linux_optional_gpu_tests_rel',           # linux_nacl_sdk_build
    'leak_detection_linux',                   # leak_detection_linux
    'layout_test_leak_detection',             # layout_test_leak_detection
  ]

  # Super beefy machines.
  optional_highmem_slaves = [904, 905]
  optional_highmem_builders = [
    'linux_upload_clang',
    'linux_chromium_cfi_rel_ng',
  ]

  # TODO(crbug.com/800576): Decomission this slave after component updater is
  # moved to use a swarming-based builder.
  optional_highcpu_slaves = [875]
  optional_highcpu_builders = [               # slavebuilddir
    'linux_chromium_component_updater',       # linux
  ]

  # Set up normal slaves.
  result = []
  for i, slave in enumerate(cq_slaves):
    result.append({
      'master': 'TryServerChromiumLinux',
      'os': 'linux',
      'version': 'trusty',
      'bits': '64',
      'builder': cq_builders,
      'preferred_builder': cq_builders[i % len(cq_builders)],
      'hostname': 'slave%d-c4' % slave,
      'pool': 'linux_cq',
    })
  for slave in optional_slaves1:
    result.append({
      'master': 'TryServerChromiumLinux',
      'os': 'linux',
      'version': 'trusty',
      'bits': '64',
      'builder': optional_builders1,
      'hostname': 'slave%d-c4' % slave,
      'pool': 'linux_optional1',
    })
  for slave in optional_slaves2:
    result.append({
      'master': 'TryServerChromiumLinux',
      'os': 'linux',
      'version': 'trusty',
      'bits': '64',
      'builder': optional_builders2,
      'hostname': 'slave%d-c4' % slave,
      'pool': 'linux_optional2',
    })
  for slave in optional_highmem_slaves:
    result.append({
      'master': 'TryServerChromiumLinux',
      'os': 'linux',
      'version': 'trusty',
      'bits': '64',
      'builder': optional_highmem_builders,
      'hostname': 'slave%d-c4' % slave,
      'pool': 'linux_optional_highmem',
    })
  for slave in optional_highcpu_slaves:
    result.append({
      'master': 'TryServerChromiumLinux',
      'os': 'linux',
      'version': 'trusty',
      'bits': '64',
      'builder': optional_highcpu_builders,
      'hostname': 'slave%d-c4' % slave,
      'pool': 'linux_optional_highcpu',
    })

  # Slaves for linux_chromium_headless_rel.
  headless_slaves = [426, 497, 776, 864, 865, 872] + range(1069, 1098)
  for slave in headless_slaves:
    result.append({
      'master': 'TryServerChromiumLinux',
      'os': 'linux',
      'version': 'trusty',
      'bits': 64,
      'builder': ['linux_chromium_headless_rel'],
      'hostname': 'slave%d-c4' % slave,
      'pool': 'linux_chromium_headless_rel',
    })

  result.append({
      'master': 'TryServerChromiumLinux',
      'os': 'linux',
      'version': 'trusty',
      'bits': '64',
      'builder': ['linux_chromium_clobber_deterministic'],
      'hostname': 'slave1388-c4',
      'pool': 'linux_deterministic',
  })

  return result


slaves = linux()
