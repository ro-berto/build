# -*- python -*-
# ex: set syntax=python:

# Copyright (c) 2012 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

# See master.experimental/slaves.cfg for documentation.

slaves = [
  # LINUX
  {
    'master': 'Dart',
    'builder': ['versionchecker-linux'],
    'hostname': 'slave122-c3',
    'os': 'linux',
    'version': 'trusty',
    'bits': '64',
  },
  # This slave has a debian jessie chroot that it runs in.
  # Do not modify or reimage it. Contact whesse@google for questions.
  {
    'master': 'Dart',
    'builder': ['debianpackage-linux'],
    'hostname': 'vm153-m3',
    'os': 'linux',
    'version': 'precise',
    'bits': '64',
  },
]


# This is a hack to eliminate the need for sharing code between master and
# clients. These channels are replicated in scripts/factory/dart/channels.py.
channel_postfixes = ['-be', '-dev', '-stable']

def is_channel_builder(builder):
  """Returns true if the builder name is already specific to a channel
  (i.e. the builder ends with a channel postfix)."""
  for postfix in channel_postfixes:
    if builder.endswith(postfix):
      return True
  return False

def duplicate_builders_in_slaves(slaves):
  """Traverses a list of slaves and duplicates the builders associated with each
  slave for every channel. The channels have specified the postfix."""
  for slave in slaves:
    all_builders = []
    for builder in slave.get('builder', ()):
      if ('v8' not in builder
          and not is_channel_builder(builder)):
        for channel in channel_postfixes:
          all_builders.append('%s%s' % (builder, channel))
      else:
        all_builders.append(builder)
    slave['builder'] = all_builders
  return slaves


class InvalidDartBuilder(Exception):
  def __init__(self):
    Exception.__init__(self, ('Error: Cannot use ccompute for '
        'master.client.dart slaves due to ipv6 requirements.'))


def check_for_ccompute(slaves):
  """Ccompute cannot be used for dart as ipv6 is needed."""
  for slave in slaves:
    if 'builder' in slave:
      for builder in slave['builder']:
        if (builder.startswith('vm-') and
            'product' not in builder and
            'reload' not in builder and
            'slave' in slave['hostname'] and
            slave['os'] == 'linux'):
          raise InvalidDartBuilder()

check_for_ccompute(slaves)
slaves = duplicate_builders_in_slaves(slaves)
