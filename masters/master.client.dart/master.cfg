# -*- python -*-
# ex: set syntax=python:

# Copyright (c) 2012 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

# It has one job: define a dictionary named BuildmasterConfig. This
# dictionary has a variety of keys to control different aspects of the
# buildmaster. They are documented in docs/config.xhtml .

from buildbot.scheduler import Dependent
from buildbot.scheduler import Scheduler
from buildbot.schedulers import triggerable

from master import build_utils
from master import master_utils
from master import slaves_list
from master import status_logger
from master import pubsub_json_status_push
from master.factory import annotator_factory
from master.factory.dart import dart_factory
from master.factory.dart.dart_factory import (linux_env, windows_env,
    linux_clang_env, linux_asan_env_64)
from master.factory.dart.channels import CHANNELS

from twisted.python import log

import config
import master_site_config
ActiveMaster = master_site_config.Dart
utils = dart_factory.DartUtils(ActiveMaster)

# Hack to increase timeout for steps, dart2js debug checked mode takes more
# than 8 hours.
utils.monkey_patch_remoteshell()

MASTER_HOST = ActiveMaster.master_host
WEB_STATUS = True
MAIL_NOTIFIER = ActiveMaster.is_production_host
GOOD_REVISIONS = ActiveMaster.is_production_host

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

config.DatabaseSetup(c)

# 'slavePortnum' defines the TCP port to listen on. This must match the value
# configured into the buildslaves (with their --master option)
c['slavePortnum'] = ActiveMaster.slave_port

slaves = slaves_list.SlavesList('slaves.cfg', 'Dart')

annotator = annotator_factory.AnnotatorFactory()

def setup_channel(channel):
  postfix = channel.builder_postfix

  ####### Variant definitions
  # build-base-name, category, platform, builder, tester
  # env are relative to the dart root directory.

  def category(name):
    return '%d%s%s|all' % (channel.position, name, channel.category_postfix)

  # Add recipe-based dart builders and testers
  variants_recipe_special_trigger = [
    {
      'name': 'target-arm64-vm-linux-release' + postfix,
      'category': category('1vm-misc'),
      'factory_builder': annotator.BaseFactory(
          recipe='dart/dart_cross_tester'),
      'platform': 'posix' + postfix,
    },
  ]

  for shard in range(1,5):
    builddir = 'w7ie_%s' % shard
    variants_recipe_special_trigger.append({
      'name': ('dart2js-win7-ie11-%s-4' % shard) + postfix,
      'category': category('92dart2js-windows'),
      'factory_builder': annotator.BaseFactory(recipe='dart/dart2js_nobuild'),
      'platform': 'windows' + postfix,
      'builddir': builddir + postfix,
    })

  variants_vm_recipe = [
    {
      'name': 'dart-sdk-linux' + postfix,
      'category': category('4dart-sdk'),
      'platform': 'posix' + postfix,
      'factory_builder': annotator.BaseFactory(recipe='dart/sdk_builder'),
      'env': linux_env,
    },
    {
      'name': 'dart-sdk-windows' + postfix,
      'category': category('4dart-sdk'),
      'platform': 'windows' + postfix,
      'factory_builder': annotator.BaseFactory(recipe='dart/sdk_builder'),
      'env': windows_env,
    },
    {
      'name': 'dart-sdk-mac' + postfix,
      'category': category('4dart-sdk'),
      'factory_builder': annotator.BaseFactory(recipe='dart/sdk_builder'),
      'platform': 'posix' + postfix,
    },
    {
      'name': 'vm-linux-product-x64' + postfix,
      'category': category('1vm-product'),
      'factory_builder': annotator.BaseFactory(recipe='dart/dart_vm'),
      'platform': 'posix' + postfix,
    },
    {
      'name': 'vm-win-product-x64' + postfix,
      'category': category('1vm-product'),
      'factory_builder': annotator.BaseFactory(recipe='dart/dart_vm'),
      'platform': 'windows' + postfix,
    },
    {
      'name': 'vm-mac-product-x64' + postfix,
      'category': category('1vm-product'),
      'factory_builder': annotator.BaseFactory(recipe='dart/dart_vm'),
      'platform': 'posix' + postfix,
    },
    {
      'name': 'vm-mac-debug-simdbc64' + postfix,
      'category': category('1vm'),
      'factory_builder': annotator.BaseFactory(recipe='dart/dart_vm'),
      'platform': 'posix' + postfix,
    },
    {
      'name': 'vm-mac-release-simdbc64' + postfix,
      'category': category('1vm'),
      'factory_builder': annotator.BaseFactory(recipe='dart/dart_vm'),
      'platform': 'posix' + postfix,
    },
    {
      'name': 'vm-noopt-simarm64-mac' + postfix,
      'category': category('1vm-precomp'),
      'factory_builder': annotator.BaseFactory(
          recipe='dart/dart',
          factory_properties={
              'target_arch': 'simarm64',
              'build_targets': ['runtime_precompiled'],
              'test_args': ['-cprecompiler', '-rdart_precompiled', '--use-blobs']}),
      'platform': 'posix' + postfix,
    },
    {
      'name': 'vm-precomp-android-release-1-3' + postfix,
      'category': category('1vm-precomp'),
      'factory_builder': annotator.BaseFactory(
          recipe='dart/dart',
          factory_properties={
            'target_arch': 'arm',
            'build_args': ['--os=android'],
            'build_targets': ['runtime_precompiled'],
            'test_args': ['-cprecompiler', '-rdart_precompiled',
                          '--system=android',
                          '--use-blobs',
                          '--shard=1',
                          '--shards=3']}),
      'platform': 'posix' + postfix,
    },
    {
      'name': 'vm-precomp-android-release-2-3' + postfix,
      'category': category('1vm-precomp'),
      'factory_builder': annotator.BaseFactory(
          recipe='dart/dart',
          factory_properties={
            'target_arch': 'arm',
            'build_args': ['--os=android'],
            'build_targets': ['runtime_precompiled'],
            'test_args': ['-cprecompiler', '-rdart_precompiled',
                          '--system=android',
                          '--use-blobs',
                          '--shard=2',
                          '--shards=3']}),
      'platform': 'posix' + postfix,
    },
    {
      'name': 'vm-precomp-android-release-3-3' + postfix,
      'category': category('1vm-precomp'),
      'factory_builder': annotator.BaseFactory(
          recipe='dart/dart',
          factory_properties={
            'target_arch': 'arm',
            'build_args': ['--os=android'],
            'build_targets': ['runtime_precompiled'],
            'test_args': ['-cprecompiler', '-rdart_precompiled',
                          '--system=android',
                          '--use-blobs',
                          '--shard=3',
                          '--shards=3']}),
      'platform': 'posix' + postfix,
    },
    {
      'name': 'cross-arm64-vm-linux-release' + postfix,
      'category': category('1vm-misc'),
      'factory_builder': annotator.BaseFactory(
          recipe='dart/dart_cross_compiler'),
      'platform': 'posix' + postfix,
    },
    {
      'name': 'versionchecker-linux' + postfix,
      'category': category('99misc'),
      'factory_builder': annotator.BaseFactory(recipe='dart/misc'),
      'platform': 'posix' + postfix,
    },
    {
      'name': 'debianpackage-linux' + postfix,
      'category': category('99misc'),
      'factory_builder': annotator.BaseFactory(recipe='dart/misc'),
      'platform': 'posix' + postfix,
    }
  ]

  # VM Kernel
  variants_kernel_recipe = [ ]

  for platform in ['mac']:
    for arch in ['x64']:
      for mode in ['release', 'debug']:
        variants_kernel_recipe.append({
            'name': 'vm-kernel-%s-%s-%s' % (platform, mode, arch) + postfix,
            'category': category('1vm-kernel'),
            'factory_builder':
                annotator.BaseFactory(recipe='dart/dart_vm_kernel'),
            'platform': 'posix',
        })
  for platform in ['linux', 'mac', 'win']:
    for arch in ['x64', 'ia32']:
      for mode in ['debug', 'release']:
        variants_vm_recipe.append({
          'name': 'vm-%s-%s-%s' % (platform, mode, arch) + postfix,
          'category': category('1vm'),
          'factory_builder': annotator.BaseFactory(recipe='dart/dart_vm'),
          'platform': ('windows' if platform == 'win' else 'posix') + postfix
        })

  for arch in ['simarm', 'simarm64']:
    for mode in ['debug', 'release']:
      if arch == 'simarm64' and mode == 'debug': continue
      variants_vm_recipe.append({
        'name': 'vm-linux-%s-%s' % (mode, arch) + postfix,
        'category': category('1vm'),
        'factory_builder': annotator.BaseFactory(recipe='dart/dart_vm'),
        'platform': 'posix' + postfix
      })

  for type in ['optcounter-threshold']:
    for arch in ['ia32', 'x64']:
      variants_vm_recipe.append({
        'name': 'vm-linux-release-%s-%s' % (arch, type) + postfix,
        'category': category('1vm-misc'),
        'factory_builder': annotator.BaseFactory(recipe='dart/dart_vm'),
        'platform': 'posix' + postfix
      })

  for type in ['asan']:
    for arch in ['x64']:
      variants_vm_recipe.append({
        'name': 'vm-linux-release-%s-%s' % (arch, type) + postfix,
        'category': category('1vm-misc'),
        'factory_builder': annotator.BaseFactory(recipe='dart/dart_vm'),
        'platform': 'posix' + postfix
      })

  for runtime in ['app', 'precomp']:
    for mode in ['debug', 'release', 'product']:
      if runtime == 'precomp' and mode == 'release': continue
      if runtime == 'precomp' and mode == 'debug':
        num_shards = 3
        for i in range(1, num_shards + 1):
          variants_vm_recipe.append({
            'name': ('%s-linux-%s-x64-%s-%s' % (runtime, mode, i, num_shards))
                    + postfix,
            'category': category('1vm-%s' % runtime),
            'factory_builder': annotator.BaseFactory(recipe='dart/dart_vm'),
            'platform': 'posix' + postfix,
          })
      else:
        variants_vm_recipe.append({
          'name': ('%s-linux-%s-x64' % (runtime, mode)) + postfix,
          'category': category('1vm-%s' % runtime),
          'factory_builder': annotator.BaseFactory(recipe='dart/dart_vm'),
          'platform': 'posix' + postfix,
        })

  for i in [1, 2, 3, 4]:
    variants_vm_recipe.append({
      'name': ('vm-precomp-win-simarm64-%s-4' % i) + postfix,
      'category': category('1vm-precomp'),
      'factory_builder': annotator.BaseFactory(
          recipe='dart/dart',
          factory_properties={
              'target_arch': 'simarm64',
              'build_targets': ['runtime_precompiled'],
              'test_args': ['-cprecompiler', '-rdart_precompiled',
                            '--shard=%s' % i, '--shards=4',
                            '--use-blobs']}),
      'platform': 'posix' + postfix,
    })

  for mode in ['debug', 'release']:
    variants_vm_recipe.append({
      'name': ('vm-linux-%s-x64-reload' % mode) + postfix,
      'category': category('1vm-reload'),
      'factory_builder': annotator.BaseFactory(recipe='dart/dart_vm'),
      'platform': 'posix' + postfix,
    })
    variants_vm_recipe.append({
      'name': ('vm-linux-%s-x64-reload-rollback' % mode) + postfix,
      'category': category('1vm-reload'),
      'factory_builder': annotator.BaseFactory(recipe='dart/dart_vm'),
      'platform': 'posix' + postfix,
    })
    variants_vm_recipe.append({
      'name': ('vm-mac-%s-simdbc64-reload' % mode) + postfix,
      'category': category('1vm-reload'),
      'factory_builder': annotator.BaseFactory(recipe='dart/dart_vm'),
      'platform': 'posix' + postfix,
    })

  ####### Schedulers

  # builder names
  vm_recipe_builder_names = utils.get_builder_names(variants_vm_recipe)
  kernel_recipe_builder_names = utils.get_builder_names(variants_kernel_recipe)

  c['schedulers'].append(Scheduler(
      name='main' + postfix,
      branch=channel.branch,
      treeStableTimer=0,
      builderNames=vm_recipe_builder_names + kernel_recipe_builder_names))

  ####### Builders

  for collection in [variants_kernel_recipe, variants_vm_recipe,
                     variants_recipe_special_trigger]:
    for b in utils.get_builders_from_variants(collection, slaves, []):
      c['builders'].append(b)
# End of setup_channel(channel)

c['builders'] = []
c['schedulers'] = []
for channel in CHANNELS:
  setup_channel(channel)

####### CHANGESOURCES

c['change_source'] = [
    utils.get_dart_poller('sdk', branch='master', master='main'),
    utils.get_dart_poller('sdk', branch='dev', master='main'),
    utils.get_dart_poller('sdk', branch='stable', master='main')]

####### BUILDSLAVES

c['slaves'] = utils.get_slaves(c['builders'])

# Make sure everything works together.
master_utils.VerifySetup(c, slaves)

# Prioritize the builders depending on channel.
c['prioritizeBuilders'] = utils.prioritize_builders

####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['status'] = [status_logger.StatusEventLogger()]

# Add in the pubsub pusher, which pushes all status updates to a pubsub
# topic.  This will not run unless is_production_host is set to True.
# This will fail on a production host if it cannot find the service
# account file.
pubsub_pusher = pubsub_json_status_push.StatusPush.CreateStatusPush(
    activeMaster=ActiveMaster)
if pubsub_pusher:
  c['status'].append(pubsub_pusher)

if WEB_STATUS:
  for status in utils.get_web_statuses():
    c['status'].append(status)

if MAIL_NOTIFIER:
  # We have people that are interested in a specific subset of the builders
  # and want to be notified whenever they break.
  mail_notifiers = [
    {
      'extraRecipients': ['dart-engprod@google.com'],
      'builders': ['version-checker-dev', 'version-checker-stable'],
      'subject': 'VERSION file breakage - bad build',
      'sendToInterestedUsers': True,
    }
  ]

  for notifier in utils.get_mail_notifier_statuses(mail_notifiers):
    c['status'].append(notifier)

if GOOD_REVISIONS:
  from master import goodrevisions
  # We use this basically to decide if the vm in release mode and dart2js on d8
  # succeeded.
  factory_map = []
  def is_important(name):
    # Only bleeding edge builds matter
    if not name.endswith('-be'):
      return False
    # Linux vm
    important = ['vm-linux-release-ia32', 'vm-linux-release-x64']
    for prefix in important:
      if name.startswith(prefix):
        return True

  for b in c['builders']:
    if is_important(b['name']):
      factory_map.append((b['name'], b['factory']))

  log.msg("LKGR based on: %s " % [b[0] for b in factory_map])

  any_steps = build_utils.ExtractFactoriesSteps(factory_map)
  c['status'].append(goodrevisions.GoodRevisions(
      good_revision_steps=any_steps,
      store_revisions_url=ActiveMaster.store_revisions_url))


# Keep last build logs, the default is too low.
c['buildHorizon'] = 1000
c['logHorizon'] = 500
# Must be at least 2x the number of slaves.
c['eventHorizon'] = 700

# Template generation is using 40 entries, so give it a little extra.
c['buildCacheSize'] = 42

c['properties'] = {'mastername': master_utils.GetMastername()}

####### PROJECT IDENTITY

# the 'projectName' string will be used to describe the project that this
# buildbot is working on. For example, it is used as the title of the
# waterfall HTML page. The 'projectURL' string will be used to provide a link
# from buildbot HTML pages to your project's home page.

c['projectName'] = ActiveMaster.project_name
c['projectURL'] = config.Master.project_url

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.Waterfall page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = ActiveMaster.buildbot_url
