# Copyright (c) 2012 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

# These modules come from scripts/master, which must be in the PYTHONPATH.
from master import master_utils
from master import slaves_list

import config
import master_site_config
ActiveMaster = master_site_config.WebRTC

c = BuildmasterConfig = {}
c['change_source'] = []
c['schedulers'] = []
c['builders'] = []
c['status'] = []

config.DatabaseSetup(c)

import master_source_cfg
import master_win_cfg
import master_mac_cfg
import master_linux_cfg
import master_android_cfg

master_source_cfg.Update(config, c)
master_win_cfg.Update(c)
master_mac_cfg.Update(c)
master_linux_cfg.Update(c)
master_android_cfg.Update(c)

# master.client.webrtc is about to be turned down. While it is still running,
# just don't schedule any builds on it, by clearing the list of schedulers that
# is populated by master_*_cfg above.
c['schedulers'] = []

# Must come before AutoSetupMaster().
c['buildbotURL'] = ActiveMaster.buildbot_url

# Associate the slaves to the manual builders. The configuration is in
# slaves.cfg.
slaves = slaves_list.SlavesList('slaves.cfg', 'WebRTC')
for builder in c['builders']:
  builder['slavenames'] = slaves.GetSlavesName(builder=builder['name'])
  # Disable auto_reboot when testing locally, but don't change for production.
  if not ActiveMaster.is_production_host:
    builder['auto_reboot'] = False

# The 'slaves' list defines the set of allowable buildslaves. List all the
# slaves registered to a builder. Remove dupes.
c['slaves'] = master_utils.AutoSetupSlaves(
    c['builders'],
    config.Master.GetBotPassword())
master_utils.VerifySetup(c, slaves)

# Adds common status and tools to this master.
master_utils.AutoSetupMaster(c, ActiveMaster,
    public_html='../master.chromium/public_html',
    templates=['./templates', '../master.chromium/templates'],
    tagComparator=c['change_source'][0].comparator,
    enable_http_status_push=ActiveMaster.is_production_host)

# Setup notification e-mails for failed builds.
if ActiveMaster.is_production_host:
  from buildbot.status import mail
  lookup = master_utils.FilterDomain(
      domain=ActiveMaster.master_domain,
      permitted_domains=ActiveMaster.permitted_domains)
  c['status'].append(mail.MailNotifier(
      fromaddr=ActiveMaster.from_address,
      extraRecipients=['webrtc-sheriff-mtv@grotations.appspotmail.com',
                       'webrtc-sheriff-sto@grotations.appspotmail.com'],
      lookup=lookup,
      mode='problem',
      relayhost=config.Master.smtp))
